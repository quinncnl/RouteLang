package NewSolution.xxx;

/*Generated by MPS */

import javax.swing.JFrame;
import java.util.ArrayList;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Dimension;

public class Heart extends JFrame {


  private int x;
  private int y;
  private int direction;

  private ArrayList<Integer> xArray = new ArrayList();
  private ArrayList<Integer> yArray = new ArrayList();

  private JPanel panel = new JPanel() {
    @Override
    protected void paintComponent(Graphics graphics) {
      super.paintComponent(graphics);

      graphics.setColor(Color.red);

      for (int i = 0; i < xArray.size() - 1; i++) {
        graphics.drawLine(xArray.get(i), yArray.get(i), xArray.get(i + 1), yArray.get(i + 1));
      }

    }
  };

  public void initialize() {
    this.setTitle("Heart");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(panel);
    panel.setPreferredSize(new Dimension(400, 400));
    this.pack();
    this.setVisible(true);

    direction = 1;
    x = 200;
    y = 100;
    xArray.add(x);
    yArray.add(y);

    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
    goStraight(10);
    turnRight();
    goStraight(10);
    turnLeft();
  }

  public static void main(String[] args) {
    Heart b = new Heart();
    b.initialize();
  }

  public void goStraight(int distance) {

    if (direction == 0) {
      y = y - distance;
    }
    if (direction == 1) {
      x = x + distance;
    }
    if (direction == 2) {
      y = y + distance;
    }
    if (direction == 3) {
      x = x - distance;
    }

    xArray.add(x);
    yArray.add(y);

  }

  public void turnLeft() {
    direction = direction - 1 + 4;
    direction = direction % 4;
  }

  public void turnRight() {
    direction = direction + 1;
    direction = direction % 4;

  }
}
